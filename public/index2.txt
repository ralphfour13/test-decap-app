<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Decap CMS Development Test</title>
  </head>
  <body>
    <script src="https://unpkg.com/netlify-cms@latest/dist/netlify-cms.js"></script>
    <script>
      var ONE_DAY = 60 * 60 * 24 * 1000;

      for (var i = 1; i <= 20; i++) {
        var DraggablePagePreview = createClass({
          getInitialState: function () {
            return {
              sections: [],
              draggedElement: null,
              dragOverIndex: null,
            };
          },

          componentDidMount: function () {
            this.updateSections();
          },

          componentDidUpdate: function (prevProps) {
            if (prevProps.entry !== this.props.entry) {
              this.updateSections();
            }
          },

          updateSections: function () {
            var entry = this.props.entry;
            var sections = entry.getIn(["data", "sections"]) || [];

            // Convert to plain JavaScript array
            var sectionsArray = [];
            if (sections.toJS) {
              sectionsArray = sections.toJS();
            } else if (sections.toArray) {
              sectionsArray = sections.toArray().map(function (section) {
                return section.toJS ? section.toJS() : section;
              });
            } else {
              sectionsArray = Array.isArray(sections) ? sections : [];
            }

            console.log("Sections data:", sectionsArray); // Debug log

            this.setState({
              sections: sectionsArray,
            });
          },

          handleDragStart: function (e, section, index) {
            this.setState({
              draggedElement: { section: section, index: index },
            });
            e.dataTransfer.effectAllowed = "move";
          },

          handleDragOver: function (e, index) {
            e.preventDefault();
            this.setState({ dragOverIndex: index });
          },

          handleDragLeave: function () {
            this.setState({ dragOverIndex: null });
          },

          handleDrop: function (e, targetIndex) {
            e.preventDefault();
            var draggedElement = this.state.draggedElement;

            if (draggedElement && draggedElement.index !== targetIndex) {
              var newSections = this.state.sections.slice();
              var movedSection = newSections.splice(draggedElement.index, 1)[0];
              newSections.splice(targetIndex, 0, movedSection);

              this.setState({
                sections: newSections,
                draggedElement: null,
                dragOverIndex: null,
              });

              this.updateCMSEntry(newSections);
            }
          },

          updateCMSEntry: function (newSections) {
            var onChange = this.props.onChange;
            var entry = this.props.entry;
            if (onChange && entry.setIn) {
              var updatedEntry = entry.setIn(
                ["data", "sections"],
                window.Immutable.fromJS(newSections)
              );
              onChange(updatedEntry);
            }
          },

          getTextColor: function (bgColor) {
            if (
              !bgColor ||
              bgColor === "#ffffff" ||
              bgColor === "white" ||
              bgColor === "#fff" ||
              bgColor === "ffffff"
            ) {
              return "#333";
            }

            var color = bgColor.replace("#", "");

            if (color.length === 3) {
              color = color
                .split("")
                .map(function (hex) {
                  return hex + hex;
                })
                .join("");
            }

            if (color.length === 6) {
              var r = parseInt(color.substr(0, 2), 16);
              var g = parseInt(color.substr(2, 2), 16);
              var b = parseInt(color.substr(4, 2), 16);
              var luminance = 0.299 * r + 0.587 * g + 0.114 * b;
              return luminance > 128 ? "#333" : "#fff";
            }

            return "#333";
          },

          getSectionTypeIcon: function (type) {
            switch (type) {
              case "hero":
                return "ü¶∏";
              case "content":
                return "üìù";
              case "gallery":
                return "üñºÔ∏è";
              case "contact":
                return "üìû";
              case "custom":
                return "‚öôÔ∏è";
              default:
                return "üìÑ";
            }
          },

          getSectionTypeColor: function (type) {
            switch (type) {
              case "hero":
                return "#ff6b6b";
              case "content":
                return "#4ecdc4";
              case "gallery":
                return "#45b7d1";
              case "contact":
                return "#96ceb4";
              case "custom":
                return "#ffeaa7";
              default:
                return "#ddd";
            }
          },

          renderSection: function (section, index) {
            var self = this;
            var isDraggedOver = this.state.dragOverIndex === index;
            var isDragging =
              this.state.draggedElement &&
              this.state.draggedElement.index === index;

            // Get the background color from the section data
            var backgroundColor = section.bg_color || "#ffffff";
            var textColor =
              section.text_color || this.getTextColor(backgroundColor);
            var sectionType = section.type || "content";

            // Ensure colors have # prefix if they don't already
            if (backgroundColor && !backgroundColor.startsWith("#")) {
              backgroundColor = "#" + backgroundColor;
            }
            if (textColor && !textColor.startsWith("#")) {
              textColor = "#" + textColor;
            }

            console.log("Section " + index + " bg_color:", backgroundColor);
            console.log("Section " + index + " text_color:", textColor);
            console.log("Section " + index + " type:", sectionType);

            return h(
              "div",
              {
                key: "section-" + index,
                draggable: true,
                onDragStart: function (e) {
                  self.handleDragStart(e, section, index);
                },
                onDragOver: function (e) {
                  self.handleDragOver(e, index);
                },
                onDragLeave: function () {
                  self.handleDragLeave();
                },
                onDrop: function (e) {
                  self.handleDrop(e, index);
                },
                style: {
                  padding: "20px",
                  margin: "10px 0",
                  border: isDraggedOver
                    ? "3px dashed #007acc"
                    : "2px solid #ddd",
                  borderRadius: "10px",
                  backgroundColor: "#000",
                  cursor: "move",
                  opacity: isDragging ? 0.6 : 1,
                  transition: "all 0.3s ease",
                  position: "relative",
                  color: textColor,
                  boxShadow: isDraggedOver
                    ? "0 4px 12px rgba(0,122,204,0.3)"
                    : "0 2px 8px rgba(0,0,0,0.15)",
                  transform: isDragging ? "rotate(2deg)" : "none",
                  borderLeft:
                    "5px solid " + this.getSectionTypeColor(sectionType),
                },
              },
              [
                // Drag handle
                h(
                  "div",
                  {
                    key: "handle",
                    style: {
                      position: "absolute",
                      top: "8px",
                      right: "8px",
                      fontSize: "20px",
                      color:
                        textColor === "#fff"
                          ? "rgba(255,255,255,0.8)"
                          : "rgba(0,0,0,0.6)",
                      cursor: "grab",
                      padding: "4px",
                      borderRadius: "4px",
                      backgroundColor: "#000",
                    },
                  },
                  "‚ãÆ‚ãÆ"
                ),

                // Section type indicator
                h(
                  "div",
                  {
                    key: "type-indicator",
                    style: {
                      position: "absolute",
                      top: "8px",
                      left: "8px",
                      width: "28px",
                      height: "28px",
                      backgroundColor: "#000",
                      border: "2px solid rgba(255,255,255,0.8)",
                      borderRadius: "50%",
                      fontSize: "14px",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      fontWeight: "bold",
                      boxShadow: "0 2px 4px rgba(0,0,0,0.2)",
                    },
                  },
                  this.getSectionTypeIcon(sectionType)
                ),

                // Section content
                h(
                  "div",
                  {
                    key: "content",
                    style: {
                      paddingRight: "35px",
                      paddingLeft: "40px",
                      paddingTop: "15px",
                    },
                  },
                  [
                    h(
                      "h3",
                      {
                        key: "title",
                        style: {
                          margin: "0 0 15px 0",
                          color: textColor,
                          fontSize: "18px",
                          fontWeight: "bold",
                        },
                      },
                      section.title || "Untitled Section"
                    ),

                    h(
                      "div",
                      {
                        key: "type-badge",
                        style: {
                          display: "inline-flex",
                          alignItems: "center",
                          gap: "6px",
                          padding: "6px 12px",
                          backgroundColor:
                            this.getSectionTypeColor(sectionType),
                          color: "#fff",
                          borderRadius: "20px",
                          fontSize: "12px",
                          marginBottom: "15px",
                          fontWeight: "bold",
                          boxShadow: "0 2px 4px rgba(0,0,0,0.2)",
                        },
                      },
                      [
                        this.getSectionTypeIcon(sectionType),
                        " ",
                        sectionType.toUpperCase(),
                      ]
                    ),

                    // Color information panel
                    h(
                      "div",
                      {
                        key: "color-info",
                        style: {
                          marginBottom: "15px",
                          padding: "10px 12px",
                          backgroundColor:
                            textColor === "#fff" || textColor === "#ffffff"
                              ? "rgba(255,255,255,0.15)"
                              : "rgba(0,0,0,0.08)",
                          borderRadius: "8px",
                          fontSize: "11px",
                          color: textColor,
                          fontFamily: "monospace",
                          border:
                            "1px solid " +
                            (textColor === "#fff" || textColor === "#ffffff"
                              ? "rgba(255,255,255,0.3)"
                              : "rgba(0,0,0,0.15)"),
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        },
                      },
                      [
                        h(
                          "span",
                          { key: "bg-color" },
                          "üé® Background: " + backgroundColor
                        ),
                        h(
                          "span",
                          { key: "text-color" },
                          "‚úèÔ∏è Text: " + textColor
                        ),
                      ]
                    ),

                    h("div", {
                      key: "body",
                      style: {
                        color: textColor,
                        lineHeight: "1.6",
                        fontSize: "14px",
                        backgroundColor: "rgba(255,255,255,0.05)",
                        padding: "15px",
                        borderRadius: "6px",
                        border: "1px solid rgba(255,255,255,0.1)",
                      },
                      dangerouslySetInnerHTML: {
                        __html:
                          // this.props.widgetFor(
                          //   "sections." + index + ".content"
                          // ) ||
                          section.content ||
                          "<p><em>No content added yet for this " +
                            sectionType +
                            " section...</em></p>",
                      },
                    }),
                  ]
                ),
              ]
            );
          },

          render: function () {
            var self = this;
            var entry = this.props.entry;
            var sections = this.state.sections;
            var title = entry.getIn(["data", "title"]) || "Untitled Blog Post";
            console.log({ sections });
            return h(
              "div",
              {
                style: {
                  fontFamily: "'Helvetica Neue', Helvetica, Arial, sans-serif",
                  maxWidth: "900px",
                  margin: "0 auto",
                  padding: "20px",
                  backgroundColor: "#f8f9fa",
                  minHeight: "100vh",
                },
              },
              [
                // Header
                h(
                  "div",
                  {
                    key: "header",
                    style: {
                      borderBottom: "3px solid #007acc",
                      paddingBottom: "20px",
                      marginBottom: "30px",
                      backgroundColor: "white",
                      padding: "25px",
                      borderRadius: "10px",
                      boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
                    },
                  },
                  [
                    h(
                      "h1",
                      {
                        key: "title",
                        style: {
                          color: "#007acc",
                          margin: "0 0 10px 0",
                          fontSize: "32px",
                          fontWeight: "bold",
                        },
                      },
                      title
                    ),
                    h(
                      "p",
                      {
                        key: "instruction",
                        style: {
                          color: "#666",
                          fontSize: "14px",
                          margin: 0,
                          fontStyle: "italic",
                        },
                      },
                      "‚úã Drag sections to reorder ‚Ä¢ Background & text colors applied from fields ‚Ä¢ Section types shown with icons ‚Ä¢ Changes save automatically"
                    ),
                  ]
                ),

                // Debug info
                // h(
                //   "div",
                //   {
                //     key: "debug",
                //     style: {
                //       padding: "12px",
                //       backgroundColor: "#e9ecef",
                //       borderRadius: "6px",
                //       marginBottom: "20px",
                //       fontSize: "12px",
                //       color: "#666",
                //       display: "flex",
                //       justifyContent: "space-between",
                //       alignItems: "center",
                //     },
                //   },
                //   [
                //     "üîç Debug: Found " + sections.length + " sections",
                //     h(
                //       "div",
                //       {
                //         key: "legend",
                //         style: { display: "flex", gap: "12px" },
                //       },
                //       [
                //         "ü¶∏ Hero",
                //         "üìù Content",
                //         "üñºÔ∏è Gallery",
                //         "üìû Contact",
                //         "‚öôÔ∏è Custom",
                //       ].map(function (item, i) {
                //         return h(
                //           "span",
                //           { key: i, style: { fontSize: "10px" } },
                //           item
                //         );
                //       })
                //     ),
                //   ]
                // ),

                // Sections
                h(
                  "div",
                  {
                    key: "sections",
                  },
                  sections.length > 0
                    ? sections.map(this.renderSection.bind(this))
                    : h(
                        "div",
                        {
                          style: {
                            padding: "60px 40px",
                            textAlign: "center",
                            color: "#666",
                            fontStyle: "italic",
                            border: "3px dashed #ddd",
                            borderRadius: "10px",
                          },
                        },
                        "üìù No sections added yet. Add sections to see them with background colors and section types!"
                      )
                ),

                // Order summary
                sections.length > 1
                  ? h(
                      "div",
                      {
                        key: "order",
                        style: {
                          marginTop: "30px",
                          padding: "20px",
                          borderRadius: "10px",
                          borderLeft: "5px solid #28a745",
                          boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                        },
                      },
                      [
                        h(
                          "h4",
                          {
                            key: "order-title",
                            style: { margin: "0 0 15px 0", color: "#28a745" },
                          },
                          "üìã Section Order:"
                        ),
                        h(
                          "div",
                          {
                            key: "order-list",
                            style: {
                              display: "flex",
                              flexWrap: "wrap",
                              gap: "8px",
                            },
                          },
                          sections.map(function (section, index) {
                            return h(
                              "span",
                              {
                                key: "bg_color",
                                style: {
                                  display: "inline-flex",
                                  alignItems: "center",
                                  gap: "6px",
                                  padding: "8px 14px",
                                  backgroundColor:
                                    section.bg_color || "#f8f9fa",
                                  color:
                                    section.text_color ||
                                    self.getTextColor(
                                      section.bg_color || "#f8f9fa"
                                    ),
                                  borderRadius: "20px",
                                  fontSize: "12px",
                                  border:
                                    "2px solid " +
                                    self.getSectionTypeColor(
                                      section.type || "content"
                                    ),
                                  fontWeight: "bold",
                                  boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
                                },
                              },
                              [
                                index + 1 + ".",
                                self.getSectionTypeIcon(
                                  section.type || "content"
                                ),
                                section.title || "Untitled",
                              ]
                            );
                          })
                        ),
                      ]
                    )
                  : null,
              ]
            );
          },
        });

        var date = new Date();
        date.setTime(date.getTime() + ONE_DAY);
        var month = ("0" + (date.getMonth() + 1)).slice(-2);
        var day = ("0" + date.getDate()).slice(-2);
        var dateString = "" + date.getFullYear() + "-" + month + "-" + day;
        var slug = dateString + "-post-number-" + i + ".md";

        // window.repoFiles._posts[slug] = {
        //   content:
        //     '---\ntitle: "This is post # ' +
        //     i +
        //     `\"\ndraft: ${i % 2 === 0}` +
        //     "\ndate: " +
        //     dateString +
        //     "T00:00:00.000Z\n---\n\n# The post is number " +
        //     i +
        //     "\n\nAnd this is yet another identical post body",
        // };
      }

      for (var i = 1; i <= 5; i++) {
        var date = new Date();
        date.setTime(date.getTime() + ONE_DAY);
        var month = ("0" + (date.getMonth() + 1)).slice(-2);
        var day = ("0" + date.getDate()).slice(-2);
        var dateString = "" + date.getFullYear() + "-" + month + "-" + day;
        var slug = dateString + "-faq-number-" + i + ".md";

        // window.repoFiles._faqs[slug] = {
        //   content:
        //     '---\ntitle: "This FAQ item # ' +
        //     i +
        //     '"\ndate: ' +
        //     dateString +
        //     "T00:00:00.000Z\n---\n\n# Loren ipsum dolor sit amet",
        // };
      }

      window.repoFiles._pages = {
        directory: {
          "sub-directory": {
            "nested-directory": {
              "index.md": {
                path: "_pages/directory/sub-directory/nested-directory/index.md",
                content: '---\ntitle: "Nested Directory"\n---\n',
              },
            },
            "index.md": {
              path: "_pages/directory/sub-directory/index.md",
              content: '---\ntitle: "Sub Directory"\n---\n',
            },
          },
          "another-sub-directory": {
            "index.md": {
              path: "_pages/directory/another-sub-directory/index.md",
              content: '---\ntitle: "Another Sub Directory"\n---\n',
            },
          },
          "index.md": {
            path: "_pages/directory/index.md",
            content: '---\ntitle: "Directory"\n---\n',
          },
        },
        "index.md": {
          path: "_pages/index.md",
          content: '---\ntitle: "Root Page"\n---\n',
        },
      };
    </script>
    <script>
      var PostPreview = createClass({
        render: function () {
          var entry = this.props.entry;
          console.log("abc", this.props);
          return h(
            "div",
            {},
            h(
              "div",
              { className: "cover" },
              h("h1", {}, entry.getIn(["data", "title"])),
              this.props.widgetFor("image")
            ),
            h(
              "p",
              {},
              h("small", {}, "Written " + entry.getIn(["data", "date"]))
            ),
            h("div", { className: "text" }, this.props.widgetFor("body"))
          );
        },
      });

      var GeneralPreview = createClass({
        render: function () {},
      });

      var AuthorsPreview = createClass({
        render: function () {
          return h(
            "div",
            {},
            h("h1", {}, "Authors"),
            this.props.widgetsFor("authors").map(function (author, index) {
              return h(
                "div",
                { key: index },
                h("hr", {}),
                h("strong", {}, author.getIn(["data", "name"])),
                author.getIn(["widgets", "description"])
              );
            })
          );
        },
      });

      const previewStyles = `
        .cms-editor-visual * {
          box-sizing: border-box;
        }

        .cms-editor-visual img {
          max-width: 100%;
          height: auto;
        }

        .cms-editor-visual h1,
        .cms-editor-visual h2,
        .cms-editor-visual h3,
        .cms-editor-visual h4,
        .cms-editor-visual h5,
        .cms-editor-visual h6 {
          margin-top: 0;
        }

        .cms-editor-visual p {
          margin-bottom: 1em;
        }
      `;

      CMS.registerPreviewTemplate("blog", PostPreview);
      CMS.registerPreviewTemplate("general", GeneralPreview);
      CMS.registerPreviewTemplate("authors", AuthorsPreview);
      CMS.registerPreviewStyle(previewStyles, { raw: true });

      CMS.registerPreviewTemplate("pages", DraggablePagePreview);
      CMS.registerPreviewTemplate("blog", DraggablePagePreview);
      CMS.registerPreviewTemplate("homepage", DraggablePagePreview);
    </script>
  </body>
</html>
